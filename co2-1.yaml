substitutions:
  esp_name: CO2 Sensor #Device Name
  esp_hostname: co2_1
  run_time: 1h #can be as long as needed to get data 
  sleep_time: 10s # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6h # 1st sleep time after midnight  
  x_res: '128'
  y_res: '64'
  x_space: '20'
  y_space: '15'
  font_small: 'sans_medium_15'
  font_medium: 'sans_medium_28'
  font_large: 'sans_bold_56'

esphome:
  name: ${esp_hostname}
  platform: ESP32
  board: esp-wrover-kit
#  libraries: ciniml/WireGuard-ESP32
#  includes: wg-settings.h


ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO0_IN
  phy_addr: 1
  power_pin: GPIO16
  use_address: 10.10.31.22

# Enable logging
logger:
  baud_rate: 0
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key
    
ota:
  password: !secret password

time: #!include common/time.yaml
    - platform: sntp
      on_time:
         # Every day at 10:30
          - seconds: 0
            minutes: 30
            hours: 10
            then: 
            #   - switch.turn_on: smart_scale_manual_tare_action_switch
             
sun: !include common/sun.yaml 

mqtt: !include common/mqtt.yaml

deep_sleep:
  run_duration: ${run_time}
  sleep_duration: ${sleep_time}
  id: deep_sleep_1
  
text_sensor:
  - <<: !include common/text_sensor_sunrise.yaml
  - <<: !include common/text_sensor_sunset.yaml

globals:
  - id: burnin_x
    type: int
    restore_value: no
    initial_value: '0'
  - id: burnin_y
    type: int
    restore_value: no
    initial_value: '0'
  - id: initial_zero
    type: float
    restore_value: yes
    # NOTE: make sure to align this value to the one used in "calibrate_linear" below!
    initial_value: '970928'
  - id: auto_tare_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: auto_tare_difference
    type: float
    restore_value: yes
    initial_value: '0'
    
  - id: manual_tare_flag
    type: bool
    restore_value: no
    initial_value: 'false'

interval:
  - interval: 1s
    then:
    - lambda: |-
        if (id(burnin_y) < ${y_res}-${y_space} ) {
          id(burnin_y) += 1;
        }
        else {
          id(burnin_y) = 0;
          id(burnin_x) += 1;
        }
        if (id(burnin_x) < ${x_res}-${x_space} ) {
          ESP_LOGD("main", "Don't change burnin_x");
        }
        else {
          id(burnin_x) = 0;
        }
        // ESP_LOGD("main", "Global value burnin_y is: %d and burnin_x is: %d", id(burnin_y), id(burnin_x));

i2c:
  sda: 14
  scl: 15
  scan: true
  id: bus_a
  
uart:
  - id: pmsx
    rx_pin: 12
    baud_rate: 9600
   
  - id: co2
    rx_pin: 3
    tx_pin: 1
    baud_rate: 9600
  
sensor:
  - platform: internal_temperature
    name: "Internal Temperature"
  - platform: mhz19
    uart_id: co2
    co2:
      name: "MH-Z19 CO2 Value"
    temperature:
      name: "MH-Z19 Temperature"
    update_interval: 60s
    automatic_baseline_calibration: false

  #- platform: xiaomi_lywsd03mmc
  #  mac_address: A4:C1:38:17:69:7A
  #  bindkey: "cd4feb2e97fbdcca84214c56a77bf24d"
  #  temperature:
  #    name: "PETG Aktive Box Temperature"
  #  humidity:
  #    name: "PETG Aktive Box Humidity"
  #  battery_level:
  #    name: "PETG Aktive Box Battery Level"
  - platform: homeassistant
    entity_id: sensor.blood_sugar_mmol
    id: blood_sugar_mmol
    internal: true
  - platform: homeassistant
    entity_id: sensor.xiaomi_lumi_sen_ill_mgl01_illuminance
    id: wohnzimmer_illumination
    internal: true
  #- platform: hx711
  #  id: hx711
  #  name: "Schlafzimmer Bett HX711"
  #  dout_pin: '2'
  #  clk_pin: '4'
  #  gain: 128
  #  update_interval: 5s
  #  filters:
  #    - calibrate_linear:
  #        - 1209178 -> 0
  #        - 1968137 -> 120
  #  unit_of_measurement: kg
  # RAW Scale input
  #- platform: hx711
  #  id: smart_scale_hx711_value_raw
  #  internal: True
  #  dout_pin: '2'
  #  clk_pin: '4'
  #  gain: 128
  #  unit_of_measurement: kg
  #  accuracy_decimals: 3
  #  update_interval: 2s
  #  filters:
  #    - sliding_window_moving_average:
  #        window_size: 3
  #        send_every: 1
  #  on_value:
  #    then:
  #      - sensor.template.publish:
  #          id: smart_scale_hx711_value
  #          state: !lambda 'return id(smart_scale_hx711_value_raw).state;'
  #      - if:
  #          condition:
  #            and:
  #              - lambda: 'return id(auto_tare_enabled);'
  #              # current smart scale value is below approx. 10KG (raw value -275743) aka nobody is standing on the scale
  #              - lambda: 'return id(smart_scale_hx711_value).state < 30.0;'
  #          then:
  #            - if:
  #                condition:
  #                  # current raw scale value is below expected zero value
  #                  - lambda: 'return id(smart_scale_hx711_value_raw).state < (id(initial_zero) - id(auto_tare_difference));'
  #                then:
  #                  # INcrease Auto-Tare offset to slowly align real zero value with expected zero value
  #                  - lambda: |-
  #                      id(auto_tare_difference) += 10;
  #                else:
  #                  # DEcrease Auto-Tare offset to slowly align real zero value with expected zero value
  #                  - lambda: |-
  #                      id(auto_tare_difference) -= 10;
    
  # Mapped value to KG
  #- platform: template
  #  id: smart_scale_hx711_value
  #  name: "Smart Scale HX711 Value"
  #  internal: False
  #  filters:
  #    # apply auto_tare difference
  #    - lambda: 'return x + id(auto_tare_difference);'
  #    # apply rough calibration
  #    - calibrate_linear:
  #        # retrieve these values by evaluating the raw values with loads of known mass.
  #        # note that a bigger difference between measurements usually results in higher resolution,
  #        # so measure 0 Kg and the highest known mass you have (like f.ex. your own weight, measured by a normal scale with good accuracy)
  #        - 970928 -> 0
  #        - 1968137 -> 120
  #    # map values below 0.1 to 0 (to decrease value changes due to random fluctuation)
  #    - lambda: |-
  #        if (x <= 0.5) {
  #          return 0.0;
  #        } else {
  #          return x;
  #        }
  #        
  #  unit_of_measurement: kg
  #  accuracy_decimals: 2
  #  update_interval: 2s
    
    
  - platform: pmsx003
    type: PMSX003
    uart_id: pmsx
    pm_1_0:
      name: "Particulate Matter <1.0µm Concentration"
      internal: false
      filters:
      - sliding_window_moving_average:
         window_size: 15
         send_every: 15
      - filter_out: 0.0
      on_value:
       then:
       - delay: 500ms
       - switch.turn_off: PMSX
    pm_2_5:
      name: "Particulate Matter <2.5µm Concentration"
      internal: false
      filters:
      - sliding_window_moving_average:
         window_size: 15
         send_every: 15
      - filter_out: 0.0
    pm_10_0:
      name: "Particulate Matter <10.0µm Concentration"
      internal: false
      filters:
      - sliding_window_moving_average:
         window_size: 15
         send_every: 15
      - filter_out: 0.0
switch:    
  - platform: template
    name: "OLED Display"
    id: displayswitch
    turn_off_action:
     - display.page.show: blank
     - component.update: oled
    turn_on_action:
     - display.page.show: bloodsugar
     - component.update: oled    
  - platform: gpio
    id: PMSX
    name: "PMSX Remote"
    on_turn_off:
    - delay: 120s
    - switch.turn_on: PMSX
    pin:
      number: 0
  - platform: restart
    name: "CO2 Reboot"
      
      
  ## Switch to enable/disable the auto tare feature
  #- platform: template
  #  id: smart_scale_continuous_tare_enabled
  #  name: "Smart Scale Continuous Tare Enabled"
  #  lambda: |-
  #    return id(auto_tare_enabled);
  #  turn_on_action:
  #    - lambda: |-
  #        id(auto_tare_enabled) = true;
  #  turn_off_action:
  #    - lambda: |-
  #        id(auto_tare_enabled) = false;
  
  ## Switch used to initiate a manual tare
  #- platform: template
  #  id: smart_scale_manual_tare_action_switch
  #  name: "Smart Scale Manual Tare Action"
  #  lambda: |-
  #    return id(manual_tare_flag);
  #  turn_on_action:
  #    - lambda: |-
  #        id(auto_tare_difference) = id(initial_zero) - id(smart_scale_hx711_value_raw).state;
  #    - switch.turn_off: smart_scale_manual_tare_action_switch
  #  turn_off_action:
  #    - lambda: |-
  #        id(manual_tare_flag) = false;
  ## Ende neu
     
     
button:
  - platform: wake_on_lan
    name: "Wake LG TV"
    target_mac_address: A8:23:FE:5B:A6:B4
    
#esp32_ble_tracker:
#binary_sensor:
  # Presence based on MAC address
  #- platform: ble_presence
  #  mac_address: !secret g6_mac
  #  name: "DexCom MAC at CO2 detected"
  #  # Presence based on BLE Service UUID
  #- platform: ble_presence
  #  service_uuid: '1201'
  #  name: "DexCom Service 1201 UUID detected"
  #  # Presence based on BLE Service UUID
  #- platform: ble_presence
  #  service_uuid: '1808'
  #  name: "DexCom 1808 Service UUID detected"
    
    
font: !include common/fonts.yaml

graph:
  # Show bare-minimum auto-ranged graph
  - id: blood_sugar_mmol_graph
    sensor: blood_sugar_mmol
    duration: 2h
    width: ${x_res}
    height: ${y_res}
    max_value: 15
    min_value: 2
    x_grid: 30min
    y_grid: 5.0
    
bluetooth_proxy:
  active: true
    
display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: oled
    address: 0x3C
    pages:
     - id: blank
       lambda: |-
           it.filled_rectangle(0, 0, ${x_res},${y_res}, COLOR_OFF);
           if (id(blood_sugar_mmol).state < 4) {
             it.printf(id(burnin_x), id(burnin_y), id(${font_small}),TextAlign::TOP_LEFT, "%.1f", id(blood_sugar_mmol).state);
           }
           else {
             it.printf(id(burnin_x), id(burnin_y), id(${font_small}), TextAlign::TOP_LEFT, "%.1f", id(blood_sugar_mmol).state);
           }
     - id: bloodsugar
       lambda: |-    
           if (id(blood_sugar_mmol).state < 4) {
             it.printf(0, 0, id(${font_large}),TextAlign::TOP_LEFT, "%.1f", id(blood_sugar_mmol).state);
           }
           else {
             it.printf(0, 0, id(${font_large}), TextAlign::TOP_LEFT, "%.1f", id(blood_sugar_mmol).state);
           }
           it.printf(${x_res}-2, 0, id(${font_small}), TextAlign::TOP_RIGHT, "Nix");
           it.printf(${x_res}-2, ${y_res}-2, id(${font_small}), TextAlign::BOTTOM_RIGHT, "%.0f lux", id(wohnzimmer_illumination).state);
           it.graph(0, 0, id(blood_sugar_mmol_graph));