substitutions:
  esp_name: ESP T-Block Display 2 #Device Name
  esp_hostname: ttgo-tblock2
  run_time: 3600min #can be as long as needed to get data 
  sleep_time: 1min # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6h # 1st sleep time after midnight

esphome:
  name: ${esp_hostname}
  platform: esp32
  board: ttgo-t-watch

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  use_address: 10.11.30.117
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "${esp_hostname}"
#    password: !secret password

time:
  - platform: homeassistant
    id: homeassistant_time

sun: !include common/sun.yaml

spi:
  clk_pin: 18
  mosi_pin: 23
  
deep_sleep:
  run_duration: ${run_time} 
  sleep_duration: ${sleep_time}
  id: deep_sleep_1
  esp32_ext1_wakeup:
    pins: GPIO39
    mode: ALL_LOW

text_sensor:
  - <<: !include common/text_sensor_sunrise.yaml
  - <<: !include common/text_sensor_sunset.yaml
  - platform: homeassistant
    entity_id: sensor.flsunq5_time_remaining
    id: flsunq5_remaining
    internal: true
  - platform: homeassistant
    entity_id: sensor.ender5_time_remaining
    id: ender5_remaining
    internal: true
      
binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO36
      inverted: true
    name: "${esp_name} Button 1"
    on_press:
      then:
         - display.page.show: page1
         - delay: 60s
         - display.page.show: page2
         - delay: 60s
         - deep_sleep.enter:
              id: deep_sleep_1
              sleep_duration: 1min
sensor:
  - platform: homeassistant
    entity_id: sensor.blood_sugar_mmol
    id: blood_sugar_mmol
    on_value:
        then:
         - display.page.show: page1
         - delay: 60s
         - display.page.show: page2
  - platform: homeassistant
    entity_id: sensor.gartenhaus_solar_energy_today
    id: solar_today
    internal: true
  - platform: homeassistant
    entity_id: sensor.gartenhaus_solar_energy_power
    id: solar_now
    internal: true

font: !include common/fonts.yaml

display:
  - platform: waveshare_epaper
    cs_pin: 5
    dc_pin: 19
    busy_pin: 34
    reset_pin: 27
    model: 1.54inv2
    rotation: 0
    id: epaper_display
    full_update_every: 1
    update_interval: 120s
    pages:
      - id: page1
        lambda: |-
          #define xres 200
          #define yres 200
          it.filled_rectangle(0, 0, xres, yres, COLOR_OFF);
          it.printf(0, 0, id(sans_medium), "FLSunQ5");
          if (id(flsunq5_remaining).has_state()) {
              it.printf(0, 50, id(sans_medium),  "%s", id(flsunq5_remaining).state.c_str());
          }
          it.printf(0, 100, id(sans_medium), "Ender 5");
          if (id(ender5_remaining).has_state()) {
              it.printf(0, 150, id(sans_medium),  "%s", id(ender5_remaining).state.c_str());
          }

      - id: page2
        lambda: |-
          #define xres 200
          #define yres 200
          it.filled_rectangle(0, 0, xres, yres, COLOR_OFF);
          
          if (id(blood_sugar_mmol).has_state()) {
              it.printf(0, 0, id(sans_medium), "%.1f mmol", id(blood_sugar_mmol).state);
          }
          if (id(solar_now).has_state()) {
              it.printf(0, 50, id(sans_medium), "%.0f Watt", id(solar_now).state);
          }
          if (id(solar_today).has_state()) {
              it.printf(0, 100, id(sans_medium), "%.2f kWh", id(solar_today).state);
          }
          it.strftime(xres, yres, id(sans_medium_14), TextAlign::BOTTOM_RIGHT, "%Y-%m-%d %H:%M", id(homeassistant_time).now());