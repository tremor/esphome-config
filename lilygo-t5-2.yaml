substitutions:
  esp_name: Lilygo ePaper 2 #Device Name
  esp_hostname: lilygo-t5-2
  run_time: 30s #can be as long as needed to get data 
  sleep_time: 5min # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6h # 1st sleep time after midnight
  
  
esphome:
  name: ${esp_hostname}
  platform: ESP32
  board: nodemcu-32s
  on_boot:
    then:
    - lambda: |-
          id(markerpoint).publish_state(0);
          
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${esp_hostname}"
    password: !secret password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret password

ota:
  password: !secret password

time: !include common/time.yaml

sun: !include common/sun.yaml 

mqtt: !include common/mqtt.yaml

deep_sleep:
  run_duration: ${run_time} 
  sleep_duration: ${sleep_time}
  id: deep_sleep_1
  
text_sensor:
  - <<: !include common/text_sensor_sunrise.yaml
  - <<: !include common/text_sensor_sunset.yaml
    
font: !include fonts.yaml

interval:
  - interval: 1s
    then:
     - logger.log:       
        format: "Countdown %.0f"
        args: [ 'id(countdown_display).state' ]
     - if:
        condition:
          lambda: 'return id(countdown_display).state < 1;'
        then:
          - display.page.show: page2
          - component.update: t5_display
          - logger.log: "Display Page2 "     
          - lambda: |-
              id(countdown_display).state = 3000;
        else:
          - sensor.template.publish:
              id: countdown_display
              state: !lambda |- 
                return id(countdown_display).state - 1;          

sensor:
  - platform: template
    id: markerpoint
    update_interval: 1s
  - platform: template
    id: countdown_display
    update_interval: 1s
    internal: true
  - platform: lilygo_t5_47_battery
    id: batt_volt
    update_interval: never
    voltage:
          name: "${esp_name} Battery Voltage"
  - platform: template
    name: "${esp_name} Battery"
    id: batt
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      int y = (1-(4.1-id(batt_volt).voltage->state)/(4.1-3.3))*100;
      if (y < 100) {return y;} else {return 100;};
    update_interval: never
    
binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO39
      inverted: true
    name: "${esp_name} Button 1"
    on_press:
      then:
       - lambda: |-
              id(countdown_display).state = 3;
       - sensor.template.publish:
              id: markerpoint
              state: !lambda |- 
                return id(markerpoint).state - 1;
       - component.update: batt_volt
       - component.update: batt
       - display.page.show: page1
       - component.update: t5_display

       
  - platform: gpio
    pin: 
      number: GPIO34
      inverted: true
    name: "${esp_name} Button 2"
    on_press:
      then:
       - lambda: |-
              id(countdown_display).state = 3;
       - sensor.template.publish:
              id: markerpoint
              state: !lambda |- 
                return id(markerpoint).state + 1;
       - component.update: batt_volt
       - component.update: batt
       - display.page.show: page1
       - component.update: t5_display
       

  - platform: gpio
    pin: 
      number: GPIO35
      inverted: true
    name: "${esp_name} Button 3"
    
    
  - platform: homeassistant
    entity_id: switch.tz3000_1obwwnmq_ts011f_99ad90fe_on_off_2
    id: wohnzimmer_LowBoard_Fernseher
    internal: true
  - platform: homeassistant
    entity_id: light.wohnzimmer_regal
    id: wohnzimmer_Licht_Regal
    internal: true
  - platform: homeassistant
    entity_id: switch.tz3000_1obwwnmq_ts011f_99ad90fe_on_off_3
    id: wohnzimmer_fujitsu
    internal: true

external_components:
  - source: github://ashald/esphome@lilygo-t5-47
    components: [ lilygo_t5_47 ]
  - source:
      type: git
      url: https://github.com/vbaksa/esphome
      ref: dev
    components: [lilygo_t5_47_display, lilygo_t5_47_battery]
    refresh: 5s

display:
  - platform: lilygo_t5_47
#  - platform: lilygo_t5_47_display
    id: t5_display
    rotation: 90
    update_interval: never
    full_update_every: 5 # 0 - never, 1 (default) - every, 2+ - throttled
    pages:
     - id: page1
       lambda: |-
          #define xres 540 
          #define yres 960 
          #define firstline 25
          #define nextline 50
          #define seperator 90
          // We know we will turn on the display soon to refresh it because we're already within its lambda
          // so we're just turning it on a bit earlier
          id(t5_display).power_on();

          //draw clear background
          //it.line(0, 0, xres, 0, COLOR_OFF);

          //draw clear background (forces whole display to redraw)
          //it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
          //it.filled_rectangle(1, 1, xres-1, yres-1, COLOR_OFF);
          id(t5_display).rectangle(1, ((id(markerpoint).state*nextline)+firstline), xres-4, 40);

          int y = 1;
          it.print(xres/2, y, id(sans_medium_20), TextAlign::TOP_CENTER, "Wohnzimmer");
          y+=firstline;
          it.print(1, y, id(sans_medium), TextAlign::TOP_LEFT, "Regal");
          if (id(wohnzimmer_Licht_Regal).state) {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=nextline;
          it.print(1, y, id(sans_medium), TextAlign::TOP_LEFT, "Lowboard Gaming");
          if (id(wohnzimmer_fujitsu).state) {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=nextline;
          it.print(1, y, id(sans_medium), TextAlign::TOP_LEFT, "Fernseher");
          if (id(wohnzimmer_LowBoard_Fernseher).state) {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=nextline;
          it.printf(1, 1, id(sans_medium_20), "%.2fV/%.0f%%", id(batt_volt).voltage->state, id(batt).state);
     - id: page2
       lambda: |-
          #define xres 540 
          #define yres 960
          #define firstline 25
          #define nextline 50
          #define seperator 90
          // We know we will turn on the display soon to refresh it because we're already within its lambda
          // so we're just turning it on a bit earlier
          id(t5_display).power_on();

          //draw clear background
          //it.line(0, 0, xres, 0, COLOR_OFF);

          //draw clear background (forces whole display to redraw)
          it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
          it.filled_rectangle(1, 1, xres-1, yres-1, COLOR_OFF);
          it.rectangle(1, ((id(markerpoint).state*nextline)+firstline), xres-4, nextline);

          int y = 1;
          it.print(xres/2, y, id(sans_medium_20), TextAlign::TOP_CENTER, "Wohnzimmer");
          y+=firstline;
          it.print(1, y, id(sans_medium), TextAlign::TOP_LEFT, "Regal");
          if (id(wohnzimmer_Licht_Regal).state) {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=nextline;
          it.print(1, y, id(sans_medium), TextAlign::TOP_LEFT, "Lowboard Gaming");
          if (id(wohnzimmer_fujitsu).state) {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=nextline;
          it.print(1, y, id(sans_medium), TextAlign::TOP_LEFT, "Fernseher");
          if (id(wohnzimmer_LowBoard_Fernseher).state) {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(xres, y, id(sans_medium), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=nextline;
          it.printf(1, 1, id(sans_medium_20), "%.2fV/%.0f%%", id(batt_volt).voltage->state, id(batt).state);