substitutions:
  esp_name: Umweltsensor 1 #Device Name
  esp_hostname: umweltsensor1
  
esphome:
  name: ${esp_hostname}
  platform: ESP32
  board: wemos_d1_mini32
  libraries: ciniml/WireGuard-ESP32
  includes: wg-settings-umweltsensor.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # use_address: 10.0.50.200

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${esp_hostname}"
    password: !secret password

captive_portal:

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  password: !secret password

ota:
  password: !secret password

mqtt: !include common/mqtt.yaml

sun: !include common/sun.yaml 

text_sensor:
  - <<: !include common/text_sensor_sunrise.yaml
  - <<: !include common/text_sensor_sunset.yaml

deep_sleep:
  id: deep_sleep_1

time:
  - platform: sntp
    on_time_sync:
        then:
        - lambda: |
            static const char* TAG = "wireguard";
            ESP_LOGD(TAG, "Starting...");
            if( !wg.is_initialized() ) {
                        ESP_LOGD(TAG, "Initializing WG interface...");
                        if( !wg.begin(
                                local_ip,
                                private_key,
                                endpoint_address,
                                public_key,
                                endpoint_port) ) {
                            ESP_LOGD(TAG, "Failed to initialize WG interface.");
                        }
                    }


globals:

#The load resistance on the board. Value in KiloOhms
  - id: RLOAD
    type: float
    restore_value: no
    initial_value: '1.025'

#Calibration resistance at atmospheric CO2 level. Outdoor calibration data
  - id: RZERO
    type: float
    restore_value: no
    initial_value: '35.429'

#Atmospheric CO2 level for calibration purposes. Outdoor CO2 level during calibration. Usually 450, but it's better to clarify.
  - id: ATMOCO2
    type: float
    restore_value: no
    initial_value: '450'

#Parameters for calculating ppm of CO2 from sensor resistance
#  Exponential regression:
#  GAS      | a      | b
#  CO       | 605.18 | -3.937
#  Alcohol  | 77.255 | -3.18
#  CO2      | 110.47 | -2.862
#  Tolueno  | 44.947 | -3.445
#  NH4      | 102.2  | -2.473
#  Acetona  | 34.668 | -3.369
  - id: PARA
    type: float
    restore_value: no
    initial_value: '110.47'
  - id: PARB
    type: float
    restore_value: no
    initial_value: '-2.862'

#Parameters to model temperature and humidity dependence
  - id: CORA
    type: float
    restore_value: no
    initial_value: '0.00035'
  - id: CORB
    type: float
    restore_value: no
    initial_value: '0.02718'
  - id: CORC
    type: float
    restore_value: no
    initial_value: '1.39538'
  - id: CORD
    type: float
    restore_value: no
    initial_value: '0.0018'
  - id: CORE
    type: float
    restore_value: no
    initial_value: '-0.003333333'
  - id: CORF
    type: float
    restore_value: no
    initial_value: '-0.001923077'
  - id: CORG
    type: float
    restore_value: no
    initial_value: '1.130128205'

# Here you need to indicate the supply voltage of the MQ135 sensor. It can be measured with a voltmeter. Please note that the rated power will not always be accurate.
  - id: volt_resolution
    type: float
    restore_value: no
    initial_value: '5.14'

# 1 for Exponential, 2 for Linear
  - id: regression_method
    type: int
    restore_value: no
    initial_value: '1'

i2c:
  sda: 23
  scl: 19
  scan: True
  id: bus_a

esp32_ble_tracker:

binary_sensor:
  - platform: status
    name: "Umweltsensor Status"
  # Presence based on MAC address
  - platform: ble_presence
    mac_address: CB:DC:74:AA:7B:06
    name: "DexCom MAC at Umweltsensor detected"

uart:
  rx_pin: GPIO27
  baud_rate: 9600

switch:
  - platform: gpio
    id: PMSX
    name: "PMSX Remote"
    on_turn_off:
    - delay: 120s
    - switch.turn_on: PMSX
    pin:
      number: 25

sensor:
  - platform: adc
    pin: 32
    name: "Gas ADC"
    update_interval: 60s
    attenuation: 11db
    filters:
     - multiply: 3.3 # for NodeMcu ESP8266 v3 Lua
    accuracy_decimals: 4
    unit_of_measurement: V
    id: sensor_volt

#  - platform: dht
#    pin: 5
#    temperature:
#      name: "Umweltsensor Temperatur"
#      id: htu21d_temperature
#    humidity:
#      name: "Umweltsensor Humidity"
#      id: htu21d_humidity
#    update_interval: 60s
#  - platform: bme280
#    temperature:
#      name: "BME280 Temperature"
#      oversampling: 16x
#    pressure:
#      name: "BME280 Pressure"
#    humidity:
#      name: "BME280 Humidity"
#    address: 0x77
#    update_interval: 60s
  - platform: pmsx003
    type: PMSX003
    pm_1_0:
      name: "Particulate Matter <1.0µm Concentration"
      filters:
      - sliding_window_moving_average:
         window_size: 15
         send_every: 15
      - filter_out: 0.0
      on_value:
       then:
       - delay: 500ms
       - switch.turn_off: PMSX
    pm_2_5:
      name: "Particulate Matter <2.5µm Concentration"
      filters:
      - sliding_window_moving_average:
         window_size: 15
         send_every: 15
      - filter_out: 0.0
    pm_10_0:
      name: "Particulate Matter <10.0µm Concentration"
      filters:
      - sliding_window_moving_average:
         window_size: 15
         send_every: 15
      - filter_out: 0.0
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
#    on_raw_value:
#      then:
#        - text_sensor.template.publish:
#            id: uptime_human
#            state: !lambda |-
#              int seconds = round(id(uptime_sensor).raw_state);
#              int days = seconds / (24 * 3600);
#              seconds = seconds % (24 * 3600);
#              int hours = seconds / 3600;
#              seconds = seconds % 3600;
#              int minutes = seconds /  60;
#              seconds = seconds % 60;
#              return (
#                (days ? String(days) + "d " : "") +
#                (hours ? String(hours) + "h " : "") +
#                (minutes ? String(minutes) + "m " : "") +
#                (String(seconds) + "s")
#              ).c_str();

  - platform: template
    #Linearization of the temperature dependency curve under and above 20 degree C
    #below 20degC: fact = a * t * t - b * t - (h - 33) * d
    #above 20degC: fact = a * t + b * h + c
    #this assumes a linear dependency on humidity
    #getCorrectionFactor
    name: "Correction Factor"
#    lambda: |-
#      if (id(htu21d_temperature).state<20) {
#        return (id(CORA) * id(htu21d_temperature).state * id(htu21d_temperature).state - id(CORB) *
#          id(htu21d_temperature).state + id(CORC) - (id(htu21d_humidity).state - 33.) * id(CORD));
#      } else {
#        return (id(CORE) * id(htu21d_temperature).state + id(CORF) * id(htu21d_humidity).state + id(CORG));
#      }
    update_interval: 60s
    accuracy_decimals: 6
    id: correction_factor

  - platform: template
    #Get the resistance of the sensor, ie. the measurement value @return The sensor resistance in kOhm
    # RS = [(VC x RL) / VRL] - RL
    # RS_air = ((5.14*1.0)/sensor_volt)-1.0 Calculate RS in fresh air
    #getResistance
    name: "Resistance"
    lambda: |-
      return ((id(volt_resolution)*id(RLOAD)/id(sensor_volt).state) - id(RLOAD));
    update_interval: 60s
    accuracy_decimals: 3
    unit_of_measurement: kOm
    id: resistance

  - platform: template
    # Get the resistance of the sensor, ie. the measurement value correctedfor temp/hum @return The corrected sensor resistance kOhm
    #getCorrectedResistance
    name: "Corrected Resistance"
    lambda: |-
      return (id(resistance).state / id(correction_factor).state);
    update_interval: 60s
    accuracy_decimals: 3
    unit_of_measurement: kOm
    id: corrected_resistance

  - platform: template
    # Get the ppm of CO2 sensed (assuming only CO2 in the air). The ppm of CO2 in the air
    #getPPM
    name: "PPM CO2"
    lambda: |-
      if (id(regression_method)==1) {
        return (id(PARA) * pow((id(resistance).state / id(RZERO)), id(PARB)));
      } else {
        return (pow(10, (log10(id(resistance).state / id(RZERO)) - id(PARB)) / id(PARA)));
      }
    update_interval: 60s
    unit_of_measurement: ppm
    id: ppm_co2

  - platform: template
    # Get the ppm of CO2 sensed (assuming only CO2 in the air), corrected  for temp. The ppm of CO2 in the air
    #getCorrectedPPM
    name: "Corrected PPM CO2"
    lambda: |-
      if (id(regression_method)==1) {
        return (id(PARA) * pow((id(corrected_resistance).state / id(RZERO)), id(PARB)));
      } else {
        return (pow(10, (log10(id(corrected_resistance).state / id(RZERO)) - id(PARB)) / id(PARA)));
      }
    update_interval: 60s
    unit_of_measurement: ppm
    id: corrected_ppm_co2

  - platform: template
    # Get the resistance RZero of the sensor for calibration purposes. The sensor resistance RZero in kOhm
    #getRZero
    name: "RZero"
    lambda: |-
      return (id(resistance).state / pow((id(ATMOCO2) / id(PARA)), (1./id(PARB))));
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
    update_interval: 60s
    accuracy_decimals: 3
    unit_of_measurement: kOm
    id: r_zero

  - platform: template
    # Get the corrected resistance RZero of the sensor for calibration purposes. The corrected sensor resistance RZERO in kOhm for ATMOCO2 level
    #getCorrectedRZero
    name: "CorrectedRZero"
    lambda: |-
      return (id(corrected_resistance).state / pow((id(ATMOCO2) / id(PARA)), (1./id(PARB))));
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
    update_interval: 60s
    accuracy_decimals: 3
    unit_of_measurement: kOm
    id: corrected_r_zero