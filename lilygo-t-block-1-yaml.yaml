substitutions:
  esp_name: ESP Display #Device Name
  esp_hostname: lilygo-t-block-1
  run_time: 1min #can be as long as needed to get data 
  sleep_time: 5min # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6h # 1st sleep time after midnight
  
esphome:
  name: ${esp_hostname}
  platform: ESP32
  board: ttgo-t-watch


# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret password

ota:
  password: !secret password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  #use_address: 10.11.30.163

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${esp_hostname}"
    password: !secret password

time: !include common/time.yaml

sun: !include common/sun.yaml 

mqtt: !include common/mqtt.yaml

deep_sleep:
  run_duration: ${run_time} 
  sleep_duration: ${sleep_time}
  id: deep_sleep_1
  esp32_ext1_wakeup:
    pins: GPIO36
    mode: ALL_LOW
  
text_sensor:
  - <<: !include common/text_sensor_sunrise.yaml
  - <<: !include common/text_sensor_sunset.yaml

font:
  - file: "fonts/GoogleSans-Medium.ttf"
    id: font_m14
    size: 14
  - file: "fonts/GoogleSans-Bold.ttf"
    id: font_b20
    size: 20
  - file: "fonts/GoogleSans-Medium.ttf"
    id: font_m20
    size: 20    
  - file: "fonts/GoogleSans-Medium.ttf"
    id: font_m28
    size: 28    
   # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons
    size: 160
    glyphs:
      - "\U000F0594" # clear-night
      - "\U000F0590" # cloudy
      - "\U000F0595" # partlycloudy
      - "\U000F0591" # fog      
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant
      - "\U000F0F38" # exceptional
      
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_small
    size: 56
    glyphs:
      - "\U000F059C" # Sunrise
      - "\U000F059B" # Sunset
      - "\U000F10C2" # Temperature High
      - "\U000F10C3" # Temperature Low
      - "\U000F07E4" # CO2
      - "\U000F054B" # umbrella
      - "\U000F13E2" # umbrella-closed
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F0594" # clear-night
      - "\U000F0599" # sunny
      - "\U000F07CA" # fuel
      - "\U000F024A" # flower
      - "\U000F051F" # time-remaining
      - "\U000F140B" # Energy
      - "\U000F0F29" # Frost Alert
      - "\U000F1126" # Blood Sugar
      - "\U000F00F6" # Tageswaerme
      - "\U000F03C8" # Vorlauftemperatur
      - "\U000F081C" # Tuer offen
      - "\U000F081B" # Tuer geschlossen
      
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_tiny
    size: 28
    glyphs:
      - "\U000F04B2" # sleep
      - "\U000F02DC" # home
      - "\U000F13D7" # not_home
      - "\U000F12A3" # battery-high
      - "\U000F12A2" # battery-medium
      - "\U000F12A1" # battery-low
      - "\U000F008E" # battery-outline

script:
  - id: refresh_display
    then:
      - repeat:
          count: 1
          then:
          - display.page.show: black
          - component.update: t_block_display
          - display.page.show: blank
          - component.update: t_block_display

  - id: all_data_received
    then:
      - display.page.show: main
      - component.update: t_block_display
      - script.execute: enter_sleep     
  - id: enter_sleep
    then:
      - if:
          condition:
            lambda: |- 
              auto time = id(ntp).now();
              if (!time.is_valid()) { 
                return false;
              }
              return (time.hour < 6); 
          then:
            - logger.log: "It's nighttime, entering long sleep for ${night_sleep_time}"          
            - deep_sleep.enter: 
                id: deep_sleep_1 
                sleep_duration: ${night_sleep_time}
          else:
            - logger.log: "It's daytime, entering short sleep for ${sleep_time}"             
            - deep_sleep.enter: 
                id: deep_sleep_1 
                sleep_duration: ${sleep_time}
        

    


spi:
  clk_pin: 18
  mosi_pin: 23
  
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

sensor:
  - platform: mpu6050
    address: 0x68
    accel_x:
      name: "MPU6050 Accel X"
    accel_y:
      name: "MPU6050 Accel Y"
    accel_z:
      name: "MPU6050 Accel z"
    gyro_x:
      name: "MPU6050 Gyro X"
    gyro_y:
      name: "MPU6050 Gyro Y"
    gyro_z:
      name: "MPU6050 Gyro z"
    temperature:
      name: "MPU6050 Temperature"
    update_interval: 5000ms
  - platform: homeassistant
    entity_id: sensor.mh_z19_co2_value_2
    id: schlafzimmer_co2
    internal: true
  - platform: homeassistant
    entity_id: sensor.blood_sugar_mmol
    id: blood_sugar_mmol
  - platform: homeassistant
    entity_id: sensor.heizkorperthermostat_kompakt_temperature
    id: schlafzimmer_temp
  - platform: homeassistant
    entity_id: sensor.bh1750_illuminance_2
    id: schlafzimmer_illuminance
    on_value: # Actions to perform once data for the last sensor has been received
       then:
        - display.page.show: main
        - component.update: t_block_display

binary_sensor:
  - platform: gpio
    pin: 36
    name: "Refresh button"
    on_press:
      then:
        - display.page.show: main
        - component.update: t_block_display 
    
graph:
  # Show bare-minimum auto-ranged graph
  - id: blood_sugar_mmol_graph
    sensor: blood_sugar_mmol
    duration: 2h
    width: 200
    height: 100
    max_value: 15
    min_value: 2
    x_grid: 20min

display:
  - platform: waveshare_epaper
    cs_pin: 5
    dc_pin: 19
    busy_pin: 34
    reset_pin: 27
    reset_duration: 2ms
    model: 1.54inv2
    rotation: 90
    full_update_every: 5
    update_interval: 30s
    id: t_block_display
    pages:
     - id: blank
       lambda: |-
          #define xres 200
          #define yres 200        
          //draw clear background
          it.filled_rectangle(0, 0, xres, yres, COLOR_OFF);
          it.print(xres/2, yres/2, id(font_m20), COLOR_ON, TextAlign::CENTER, "Refreshing...");          
     - id: black
       lambda: |-
          #define xres 200
          #define yres 200        
          //draw filled background
          it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
          it.print(xres/2, yres/2, id(font_m20), COLOR_OFF, TextAlign::CENTER, "Refreshing...");
     - id: main
       lambda: |-
         #define xres 200 
         #define yres 200
         #define x_pad 5 // border padding
         #define y_pad 5 // border padding
         #define nextline 35
         #define seperator 90
         #define firstx 60
         //draw clear background (forces whole display to redraw)
         it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
         it.filled_rectangle(1, 1, xres-1, yres-1, COLOR_OFF);
         int y = 1;
         int x = 1;
         //it.print(x, y, id(font_m20), TextAlign::BASELINE_LEFT, "Schlafzimmer");
         // Date
         it.strftime(xres/2, y+y_pad, id(font_m20), TextAlign::TOP_CENTER, "%d.%b %H:%M", id(ntp).now());;
         x= firstx;
         y=60;
         it.printf(x, y, id(font_m28), TextAlign::BASELINE_RIGHT, "%.1f", id(schlafzimmer_temp).state);
         it.print(x, y, id(font_m28), TextAlign::BASELINE_LEFT, "Â°C");
         x+= seperator;
         it.printf(x, y, id(font_m28), TextAlign::BASELINE_RIGHT, "%.0f", id(schlafzimmer_co2).state);
         it.print(x, y, id(font_m20), TextAlign::BASELINE_LEFT, "ppm");
         x= firstx;
         y+= nextline;
         it.printf(x, y, id(font_m28), TextAlign::BASELINE_RIGHT, "%.1f", id(blood_sugar_mmol).state);
         it.print(x, y, id(font_m14), TextAlign::BASELINE_LEFT, "mmol");
         x+= seperator;
         it.printf(x, y, id(font_m28), TextAlign::BASELINE_RIGHT, "%.0f", id(schlafzimmer_illuminance).state);
         it.print(x, y, id(font_m28), TextAlign::BASELINE_LEFT, "lx");
         y+= y_pad;
         it.graph(0, y, id(blood_sugar_mmol_graph));