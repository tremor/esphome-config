substitutions:
  esp_name: TTGO T4 Display #Device Name
  esp_hostname: ttgo-t4
  sleep_time: 5min # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6h # 1st sleep time after midnight
  font_small: 'sans_medium_10'
  font_medium: 'sans_medium_20'
  font_large: 'sans_bold_56'
  x_res: '240'
  y_res: '320'
  firstline: '15'
  nextline: '25'
  seperator: '90'
  
esphome:
  name: ${esp_hostname}
  platform: ESP32
  board: nodemcu-32s
  on_boot:
    then:
    - switch.turn_off: background
    - wait_until:
       api.connected:
    - lambda: |-
         ESP_LOGD("main", "Global value markerpoint is: %d", id(markerpoint));
    - switch.turn_on: background

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  #use_address: 10.11.30.115


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${esp_hostname}"
    password: !secret password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret password

ota:
  password: !secret password

color: !include common/colors.yaml

font: !include common/fonts.yaml

time: !include common/time.yaml

sun: !include common/sun.yaml

text_sensor:
  - <<: !include common/text_sensor_sunrise.yaml
  - <<: !include common/text_sensor_sunset.yaml

globals:
   - id: countdown
     type: int
     restore_value: no
     initial_value: '30'
   - id: markerpoint
     type: int
     restore_value: no
     initial_value: '0'
     
interval:
  - interval: 1s
    then:
     - logger.log:       
        format: "Countdown %d"
        args: [ 'id(countdown)' ]
     - if:
        condition:
          lambda: 'return id(countdown) < 1;'
        then:
          - switch.turn_off: background
        else:
          - lambda: 'id(countdown) -= 1;'

script:
  - id: check_markerpoint_below
    then:
      - if:
         condition:
           lambda: 'return id(markerpoint) == -1;'
         then:
           - lambda: |-
              id(markerpoint) = 11;
           - logger.log: "Below 0"
  - id: check_markerpoint_above
    then:
      - if:
         condition:
           lambda: 'return id(markerpoint) == 12;'
         then:
           - lambda: |-
              id(markerpoint) = 0;
           - logger.log: "Above 11"
           
  - id: button_toggle
    then:
           lambda: |-
             id(switch_ha).toggle();
             
sensor:
  - <<: !include common/sensor_wifisignal.yaml
  - platform: homeassistant
    entity_id: sensor.blood_sugar_mmol
    id: blood_sugar_mmol
    internal: true
  - platform: homeassistant
    entity_id: sensor.temperatur_und_luftfeuchtigkeitssensor_temperature
    id: schlafzimmer_temp
    internal: true
  - platform: homeassistant
    entity_id: sensor.temperatur_und_luftfeuchtigkeitssensor_humidity
    id: schlafzimmer_humid
    internal: true
  - platform: homeassistant
    entity_id: sensor.bh1750_illuminance_2
    id: schlafzimmer_illumination
    internal: true
  - platform: homeassistant
    entity_id: sensor.mh_z19_co2_value_2
    id: schlafzimmer_co2
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.temperatur_und_luftfeuchtigkeitssensor_mit_display_humidity
    id: wohnzimmer_humid
    internal: true
  - platform: homeassistant
    entity_id: sensor.temperatur_und_luftfeuchtigkeitssensor_mit_display_temperature
    id: wohnzimmer_temp
    internal: true
  - platform: homeassistant
    entity_id: sensor.xiaomi_lumi_sen_ill_mgl01_illuminance
    id: wohnzimmer_illumination
    internal: true


    
  - platform: homeassistant
    entity_id: sensor.tempf_lacrosse204_temperature
    id: dachboden_temp
    internal: true
  - platform: homeassistant
    entity_id: sensor.tempf_lacrosse204_humidity
    id: dachboden_humid
    internal: true
  - platform: homeassistant
    entity_id: sensor.xiaomi_lumi_sen_ill_mgl01_3d351a00_illuminance
    id: dachboden_illumination
    internal: true
    
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: rotator
    pin_a: 26
    pin_b: 36
    on_clockwise:
      then:
        - logger.log: "Turned Clockwise"
        - lambda: |-
              id(countdown) = 10;
              id(markerpoint) += 1;
        - script.execute: check_markerpoint_above
        - switch.turn_on: background
        - display.page.show: wohnzimmer

    on_anticlockwise:
      then:
        - logger.log: "Turned Anticlockwise"
        - lambda: |-
              id(countdown) = 10;
              id(markerpoint) -= 1;
        - script.execute: check_markerpoint_below
        - switch.turn_on: background
        - display.page.show: wohnzimmer

     
binary_sensor:
  - platform: gpio
    name: "BUTTON_LINKS"
    pin:
      number: 39
      inverted: true
    on_press:
      then:
        - lambda: |-
              id(countdown) = 10;
              id(markerpoint) += 1;
        - script.execute: check_markerpoint_above
        - switch.turn_on: background
        - display.page.show: wohnzimmer
        - logger.log:       
            format: "Button Down %d"
            args: [ 'id(markerpoint)' ]
        
  - platform: gpio
    name: "BUTTON_RECHTS"
    pin:
      number: 38
      inverted: true
    on_press:
      then:
        - lambda: |-
              id(countdown) = 10;
              id(markerpoint) -= 1;
        - script.execute: check_markerpoint_below
        - switch.turn_on: background
        - display.page.show: wohnzimmer
        - logger.log:       
            format: "Button Up %d"
            args: [ 'id(markerpoint)' ]
  - platform: gpio
    name: "BUTTON_MITTE"
    pin:
      number: 37
      inverted: true
    on_press:
      then:
        - lambda: |-
             id(countdown) = 10;
        - script.execute: button_toggle
        - switch.turn_on: background
        - display.page.show: wohnzimmer
  - platform: gpio
    name: "Rotary Enter"
    pin:
      number: 19
      inverted: true
    on_press:
      then:
        - lambda: |-
             id(countdown) = 10;
        - script.execute: button_toggle
        - switch.turn_on: background
        - display.page.show: wohnzimmer

  - platform: homeassistant
    entity_id: binary_sensor.fenster_wohnzimmer
    id: wohnzimmer_fenster
    internal: true
  - platform: homeassistant
    entity_id: switch.kasa_schalter_1
    id: schlafzimmer_sensor_0
    internal: true
  - platform: homeassistant
    entity_id: switch.kasa_schalter_3_wz_tischlampe
    id: wohnzimmer_tischlampe
    internal: true
  - platform: homeassistant
    entity_id: switch.kasa_schalter_4_wz_stehlampe
    id: wohnzimmer_stehlampe
    internal: true
  - platform: homeassistant
    entity_id: switch.wohnzimmer_lowboard_99ad90fe_on_off
    id: wohnzimmer_PS4
    internal: true
  - platform: homeassistant
    entity_id: switch.wohnzimmer_lowboard_99ad90fe_on_off_2
    id: wohnzimmer_LowBoard_Fernseher
    internal: true
  - platform: homeassistant
    entity_id: light.wohnzimmer_regal
    id: wohnzimmer_Licht_Regal
    internal: true
  - platform: homeassistant
    entity_id: humidifier.wohnzimmer_befeuchter
    id: wohnzimmer_Befeuchter
    internal: true
  - platform: homeassistant
    entity_id: switch.wohnzimmer_lowboard_99ad90fe_on_off_3
    id: wohnzimmer_fujitsu
    internal: true
  - platform: homeassistant
    entity_id: switch.adguard_filtering
    id: sensor_adguard_filtering
    internal: true
  - platform: homeassistant
    entity_id: switch.wohnzimmer_esstisch_7a9747fe_on_off
    id: esstisch_switch_1
    internal: true    
  - platform: homeassistant
    entity_id: switch.wohnzimmer_esstisch_7a9747fe_on_off_2
    id: esstisch_switch_2
    internal: true    
  - platform: homeassistant
    entity_id: switch.wohnzimmer_esstisch_7a9747fe_on_off_3
    id: esstisch_switch_3
    internal: true    
  - platform: homeassistant
    entity_id: switch.wintergarten_jbl_500_socket_1
    id: wintergarten
    internal: true    
  - platform: homeassistant
    entity_id: switch.sonoff11_th10_bachlauf
    id: bachlauf
    internal: true 
  - platform: homeassistant
    entity_id: switch.8tbhdd
    id: zotac_hdds
    internal: true    

switch:
  - platform: gpio
    pin: 4
    id: background
  - platform: template
    internal: true
    id: switch_ha
    turn_on_action:
        - wait_until:
            api.connected:
        - homeassistant.event:
           event: esphome.switch_all
           data:
             message: !lambda |- 
                return id(markerpoint);

    turn_off_action:
        - wait_until:
            api.connected:
        - homeassistant.event:
           event: esphome.switch_all
           data:
             message: !lambda |- 
                return id(markerpoint);

graph:
  # Show bare-minimum auto-ranged graph
  - id: blood_sugar_mmol_graph
    sensor: blood_sugar_mmol
    duration: 2h
    width: 240
    height: 60
    max_value: 15
    min_value: 2
    x_grid: 30min
spi:
  clk_pin: 18
  miso_pin: 12
  mosi_pin: 23


display:
  - platform: ili9341
    model: TFT_2.4
    cs_pin: 27
    dc_pin: 32
    led_pin: 4
    reset_pin: 5
    rotation: 180
    id: my_display
    update_interval: 500ms
    #auto_clear_enabled: false
    pages:
     - id: wohnzimmer
       lambda: |-
          int y = 1;
          it.rectangle(1, (id(markerpoint)*${nextline})+${firstline}, ${x_res}-1, ${nextline}, id(RED));
          it.print(${x_res}/2, y, id(${font_small}), TextAlign::TOP_CENTER, "Wohnzimmer");
          y+=${firstline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Tisch");
          if (id(wohnzimmer_tischlampe).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Lowboard Gaming");
          if (id(wohnzimmer_fujitsu).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Fernseher");
          if (id(wohnzimmer_LowBoard_Fernseher).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Esstisch USB");
          if (id(esstisch_switch_1).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Esstisch 2");
          if (id(esstisch_switch_2).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Esstisch 3");
          if (id(esstisch_switch_3).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Wintergarten");
          if (id(wintergarten).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Stehlampe");
          if (id(wohnzimmer_stehlampe).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "PS4/Stereo");
          if (id(wohnzimmer_PS4).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "AdGuard");
          if (id(sensor_adguard_filtering).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Festplatten");
          if (id(zotac_hdds).state) {
           it.printf(${x_res}, y, id(${font_medium}), id(RED), TextAlign::TOP_RIGHT, "An");
          }
          else {
           it.printf(${x_res}, y, id(${font_medium}), id(GREEN), TextAlign::TOP_RIGHT, "Aus");
          }
          y+=${nextline};
          
     - id: schlafzimmer
       lambda: |-
          int y = 1;
          it.print(${x_res}/2, y, id(${font_small}), TextAlign::TOP_CENTER, "Schlafzimmer");
          y+=${firstline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Temperatur");
          it.printf(${x_res}-1, y, id(${font_medium}), TextAlign::TOP_RIGHT, "%.1f °C", id(schlafzimmer_temp).state);
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Luftfeuchte");
          it.printf(${x_res}-1, y, id(${font_medium}), TextAlign::TOP_RIGHT, "%.0f%%", id(schlafzimmer_humid).state);
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Helligkeit");
          it.printf(${x_res}-1, y, id(${font_medium}), TextAlign::TOP_RIGHT, "%.0f lx", id(schlafzimmer_illumination).state);
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "CO2");
          it.printf(${x_res}-1, y, id(${font_medium}), TextAlign::TOP_RIGHT, "%.0f mmol", id(schlafzimmer_co2).state);
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Blutzucker");
          it.printf(${x_res}-1, y, id(${font_medium}), TextAlign::TOP_RIGHT, "%.1f mmol", id(blood_sugar_mmol).state);
          
          
     - id: dachboden
       lambda: |-
          int y = 1;
          it.print(${x_res}/2, y, id(${font_small}), TextAlign::TOP_CENTER, "Dachboden");
          y+=${firstline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Temperatur");
          it.printf(${x_res}-1, y, id(${font_medium}), TextAlign::TOP_RIGHT, "%.1f °C", id(dachboden_temp).state);
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Luftfeuchte");
          it.printf(${x_res}-1, y, id(${font_medium}), TextAlign::TOP_RIGHT, "%.0f%%", id(dachboden_humid).state);
          y+=${nextline};
          it.print(1, y, id(${font_medium}), TextAlign::TOP_LEFT, "Helligkeit");
          it.printf(${x_res}-1, y, id(${font_medium}), TextAlign::TOP_RIGHT, "%.0f lx", id(dachboden_illumination).state);